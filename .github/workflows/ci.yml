name: CI

on:
  pull_request:
  push:
    branches:
      - main

jobs:
  style:
    name: Check Style
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt
      - name: Style Check
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
  test:
    name: Test
    needs: [style]
    runs-on: ubuntu-latest

    strategy:
      matrix:
        build: [stable]

    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust || 'stable' }}
          override: true
      - name: Build debug
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: ${{ matrix.features }}
      - name: Test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: ${{ matrix.features }}
  deploy:
    name: Release Build
    needs: [test]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: 
          - x86_64-unknown-linux-musl
          - i686-unknown-linux-musl
          - armv7-unknown-linux-musleabihf
          - aarch64-unknown-linux-musl
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ matrix.target }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-
      - uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --release --verbose --features "docker" --target ${{ matrix.target }}
      - uses: actions/upload-artifact@v2
        with:
          name: fping_exporter ${{ matrix.target }}
          path: target/${{ matrix.target }}/release/fping_exporter*
          if-no-files-found: error
          
      #TODO: emit binaries to workflow